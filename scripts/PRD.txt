# Chatbot Backend (NestJS Microservices)

## Overview  
The Chatbot Backend provides a scalable, real-time communication platform similar to Telegram using NestJS microservices architecture. It enables users to register, authenticate, chat in real-time, and interact with bots. The system uses a combination of PostgreSQL and MongoDB databases with Redis caching for optimal performance.

## Core Features  

### User Authentication
- **User Registration**: Allows new users to create accounts with email/password
- **User Login**: Authenticates users and provides JWT tokens for subsequent requests
- **Session Management**: Handles user sessions with refresh tokens stored in Redis

### User Management
- **User Profiles**: Stores and retrieves user profile information
- **Status Tracking**: Monitors and broadcasts user online/offline status
- **User Search**: Enables finding other users by username or other criteria

### Real-time Chat
- **Private Messaging**: Enables one-to-one conversations between users
- **Group Chats**: Allows multiple users to participate in shared conversations
- **Message Persistence**: Stores all messages in MongoDB for history and retrieval
- **Real-time Updates**: Delivers messages instantly using Socket.io
- **Typing Indicators**: Shows when users are typing messages
- **Read Receipts**: Indicates when messages have been delivered and read

### Bot Integration
- **Bot Interaction**: Allows users to communicate with automated bots
- **Response Generation**: Provides automated replies based on user messages
- **Command Processing**: Handles specific commands from users to bots

## Technical Architecture  

### System Components

#### API Gateway
- Entry point for all client requests
- Routes requests to appropriate microservices
- Manages WebSocket connections
- Implements rate limiting and security measures

#### Auth Service
- Handles user registration and login
- Generates and validates JWT tokens
- Manages user sessions with Redis
- Stores user credentials in PostgreSQL

#### User Service
- Manages user profiles in PostgreSQL
- Tracks user status with Redis
- Provides user search functionality
- Handles user preferences and settings

#### Chat Service
- Manages conversations and message threads in MongoDB
- Implements real-time message delivery via Socket.io
- Tracks message status (sent, delivered, read)
- Provides typing indicators and presence information

#### Bot Service
- Processes bot interactions
- Generates appropriate responses
- Maintains conversation context
- Configures bot behavior and capabilities

### Data Models

#### User (PostgreSQL)
- id (UUID)
- username (string, unique)
- email (string, unique)
- password (hashed string)
- created_at (timestamp)
- updated_at (timestamp)

#### UserProfile (PostgreSQL)
- user_id (UUID, foreign key)
- display_name (string)
- avatar_url (string)
- bio (text)
- settings (JSONB)

#### Conversation (MongoDB)
- id (ObjectId)
- type (enum: 'private', 'group')
- participants (array of user_ids)
- created_at (timestamp)
- updated_at (timestamp)

#### Message (MongoDB)
- id (ObjectId)
- conversation_id (ObjectId, reference)
- sender_id (UUID)
- content (text)
- sent_at (timestamp)
- delivery_status (array of {user_id, status})
- type (enum: 'text', 'image', 'file')

### Infrastructure Requirements
- Docker containers for each microservice
- PostgreSQL for user data
- MongoDB for messages and conversations
- Redis for caching and real-time features
- RabbitMQ for inter-service communication
- Socket.io for real-time client-server communication

## Development Roadmap  

### MVP Phase
1. **Foundation Infrastructure**
   - Set up NestJS monorepo structure
   - Configure Docker and docker-compose
   - Set up database connections
   - Implement service discovery pattern

2. **Authentication System**
   - User registration with validation
   - Login with JWT generation
   - Token refresh mechanism
   - Basic authorization guards

3. **User Management**
   - User profile CRUD operations
   - Basic user search functionality
   - Simple online/offline status

4. **Basic Chat Functionality**
   - Private conversation creation
   - Text message sending and receiving
   - Message persistence
   - Real-time updates via Socket.io

5. **Simple Gateway**
   - Route configuration
   - Basic request validation
   - WebSocket connection handling
   - Simple error handling

6. **Minimal Bot Framework**
   - Basic bot configuration
   - Simple command responses
   - Integration with chat service

### Enhancement Phase
1. **Advanced Chat Features**
   - Group conversations
   - Typing indicators
   - Message delivery status
   - Read receipts
   - Message history with pagination

2. **Enhanced User Features**
   - Advanced user search
   - User blocking
   - Profile customization
   - Privacy settings

3. **Bot Improvements**
   - Context-aware responses
   - Natural language processing
   - Customizable bot behaviors
   - Multi-step interactions

4. **Gateway Enhancements**
   - Rate limiting
   - CORS configuration
   - Advanced logging
   - Request tracing

5. **Performance Optimizations**
   - Caching strategies
   - Database indexing
   - Connection pooling
   - Message queue optimization

## Logical Dependency Chain

1. **Infrastructure Setup**
   - Docker environment configuration
   - Database setup
   - Message broker configuration
   - Service discovery implementation

2. **Core Authentication**
   - User schema design
   - Registration endpoint implementation
   - Login and JWT generation
   - Token validation middleware

3. **User Service Foundation**
   - User profile schema
   - Basic CRUD operations
   - Service communication setup

4. **Gateway Implementation**
   - API route configuration
   - Socket.io server setup
   - Authentication middleware integration

5. **Basic Chat Functionality**
   - Conversation schema design
   - Message schema implementation
   - Socket.io event handlers
   - Message persistence logic

6. **Bot Framework Foundation**
   - Bot configuration system
   - Simple response mechanism
   - Integration with chat service

7. **Real-time Features**
   - Typing indicators
   - Online status broadcasting
   - Read receipts implementation

## Risks and Mitigations  

### Technical Challenges
- **WebSocket Scaling**: 
  - Risk: Difficulty scaling WebSocket connections across multiple service instances
  - Mitigation: Implement Redis adapter for Socket.io to handle shared connections

- **Database Complexity**: 
  - Risk: Managing two different database systems (PostgreSQL and MongoDB)
  - Mitigation: Clear separation of concerns and data models between services

- **Microservice Communication**: 
  - Risk: Service discovery and communication failures
  - Mitigation: Implement circuit breakers and retries; comprehensive logging

### MVP Scope Management
- **Feature Creep**: 
  - Risk: Expanding scope beyond core functionality
  - Mitigation: Strict prioritization of features based on user value

- **Complexity vs. Simplicity**: 
  - Risk: Overengineering the initial implementation
  - Mitigation: Focus on core functionality first; design for extensibility

### Resource Constraints
- **Performance Bottlenecks**: 
  - Risk: Unexpected performance issues under load
  - Mitigation: Early performance testing; monitoring implementation

- **Development Velocity**: 
  - Risk: Slower than expected progress due to technical challenges
  - Mitigation: Modular approach allowing parallel development of services

## Appendix  

### Technology Stack
- **Backend Framework**: NestJS
- **Databases**: PostgreSQL, MongoDB
- **Caching**: Redis
- **Message Broker**: RabbitMQ
- **Real-time Communication**: Socket.io
- **Containerization**: Docker
- **API Documentation**: Swagger

### Security Considerations
- **Authentication**: JWT with refresh tokens
- **Password Storage**: Bcrypt hashing
- **Rate Limiting**: Implemented at Gateway level
- **Input Validation**: Strict validation on all endpoints
- **Data Sanitization**: Prevention of injection attacks

### Scalability Approach
- Horizontal scaling of stateless services
- Database sharding strategy for messages
- Redis for distributed caching and Socket.io adapter
- Message queue for asynchronous processing 